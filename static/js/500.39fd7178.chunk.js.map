{"version":3,"file":"static/js/500.39fd7178.chunk.js","mappings":"4KAEaA,GAAeC,E,QAAAA,IAAO,SAAPA,CAAH,ivBACT,SAACC,GAAD,OAAOA,EAAEC,OAAS,MAAlB,IACL,SAACD,GAAD,OAAQA,EAAEC,MAAQ,UAAY,SAA9B,IAGA,SAACD,GAAD,OAAQA,EAAEE,WAAa,OAAS,KAAhC,IAKO,SAACF,GAAD,OAAQA,EAAEC,MAAQ,UAAY,SAA9B,IAIL,SAACD,GAAD,OAAQA,EAAEG,QAAUH,EAAEG,QAAU,QAAhC,IAIE,SAACH,GAAD,OAAQA,EAAEE,WAAa,QAAU,MAAjC,I,SCjBFE,EAAS,SAAC,GAAD,IACpBH,EADoB,EACpBA,MACAC,EAFoB,EAEpBA,WACAG,EAHoB,EAGpBA,SACAC,EAJoB,EAIpBA,QAJoB,OAMpB,SAACR,EAAD,CAAcG,MAAOA,EAAOC,WAAYA,EAAYI,QAASA,EAA7D,SACGD,GAPiB,C,mFCDTE,GAAkBR,E,QAAAA,IAAO,MAAPA,CAAH,2eAOZ,SAACC,GAAD,OAAQA,EAAEQ,OAAS,oBAAsB,EAAzC,I,SCFhB,EAJkB,SAAC,GAAD,IAAGA,EAAH,EAAGA,OAAQH,EAAX,EAAWA,SAAX,OAChB,SAACE,EAAD,CAAiBC,OAAQA,EAAzB,SAAkCH,GADlB,C,oECDLI,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAf,OACrB,gBAAKF,IAAG,mBAAcA,GAAOG,IAAKH,EAAKC,MAAOA,EAAOC,OAAQA,GADxC,C,wDCsBvB,KAAeE,EAAAA,EAAAA,IAAf,EApBiB,SAAC,GAAD,IACfC,EADe,EACfA,KACAC,EAFe,EAEfA,YACAC,EAHe,EAGfA,SACAC,EAJe,EAIfA,EACAhB,EALe,EAKfA,WACAiB,EANe,EAMfA,YANe,OAQf,UAAC,KAAD,CAAiBjB,WAAYA,EAA7B,WACE,SAAC,KAAD,CAAOkB,QAASL,EAAhB,SAAuBG,EAAEH,MACzB,SAAC,KAAD,CACEC,YAAaE,EAAEF,GACfK,GAAIN,EACJA,KAAMA,EACNE,SAAUA,EACVE,YAAaA,MAfF,G,qICFJZ,GAAkBR,EAAAA,EAAAA,IAAO,MAAPA,CAAH,oHAIjB,SAACC,GAAD,OAAQA,EAAEE,WAAaF,EAAEE,WAAa,MAAtC,IAGEoB,GAAiBvB,EAAAA,EAAAA,IAAO,WAAPA,CAAH,iFAGf,SAACC,GAAD,OAAQA,EAAEmB,YAAc,QAAUnB,EAAEmB,WAApC,IAGCI,GAAQxB,EAAAA,EAAAA,IAAO,QAAPA,CAAH,kG,mNCXLyB,GAAgBzB,EAAAA,EAAAA,IAAO,SAAPA,CAAH,uIASb0B,GAAgB1B,EAAAA,EAAAA,IAAO2B,EAAAA,GAAP3B,CAAH,0CAIb4B,GAAU5B,EAAAA,EAAAA,IAAO,MAAPA,CAAH,yEA2BP6B,IAtBgB7B,EAAAA,EAAAA,IAAO,MAAPA,CAAH,sNAaIA,EAAAA,EAAAA,IAAO,MAAPA,CAAH,4JAEhB,SAACC,GAAD,OAAQA,EAAEW,MAAQ,OAAS,OAA3B,KAOWZ,EAAAA,EAAAA,IAAO,MAAPA,CAAH,0JAYN8B,GAAY9B,EAAAA,EAAAA,IAAO,MAAPA,CAAH,gGAMT+B,GAAO/B,EAAAA,EAAAA,IAAO,KAAPA,CAAH,0FAMJgC,GAAqBhC,EAAAA,EAAAA,IAAO4B,EAAP5B,CAAH,6MAWlBwB,GAAQxB,EAAAA,EAAAA,IAAO,OAAPA,CAAH,qKASLiC,GAAUjC,EAAAA,EAAAA,IAAOkC,EAAAA,EAAPlC,CAAH,4CAIPmC,GAAOnC,EAAAA,EAAAA,IAAO,OAAPA,CAAH,4P,SCAjB,GAAee,EAAAA,EAAAA,IAAf,EA1Ee,SAAC,GAAgB,IAAdI,EAAa,EAAbA,EAChB,GAAiCiB,EAAAA,EAAAA,WAAS,GAA1C,eAAOC,EAAP,KAAgBC,EAAhB,KAMMC,EAAU,WACdD,GAAeD,EAChB,EAEKG,EAAW,WACf,IAAMC,EAAW,SAACnB,GACAoB,SAASC,eAAerB,GAChCsB,eAAe,CACrBC,SAAU,WAEZP,GAAc,EACf,EACD,OACE,iCACE,SAACN,EAAD,CAAoBzB,QAAS,kBAAMkC,EAAS,QAAf,EAA7B,UACE,SAACN,EAAD,UAAOhB,EAAE,cAEX,SAACa,EAAD,CAAoBzB,QAAS,kBAAMkC,EAAS,UAAf,EAA7B,UACE,SAACN,EAAD,UAAOhB,EAAE,gBAEX,SAACa,EAAD,CAAoBzB,QAAS,kBAAMkC,EAAS,UAAf,EAA7B,UACE,SAACN,EAAD,UAAOhB,EAAE,gBAEX,SAACa,EAAD,CACEc,MAAO,CAAElC,MAAO,SAChBL,QAAS,kBAAMkC,EAAS,UAAf,EAFX,UAIE,SAACN,EAAD,WACE,SAAC9B,EAAA,EAAD,CAAQF,YAAY,EAApB,SAA2BgB,EAAE,4BAKtC,EAED,OACE,SAACM,EAAD,WACE,UAACsB,EAAA,QAAD,YACE,UAAC,IAAD,CAAKC,QAAQ,gBAAb,WACE,SAACtB,EAAD,CAAeuB,GAAG,IAAI,aAAW,WAAjC,UACE,SAACvC,EAAA,EAAD,CAASC,IAAI,WAAWC,MAAM,QAAQC,OAAO,YAE/C,SAACiB,EAAD,WACE,SAACU,EAAD,OAEF,SAACX,EAAD,CAAQtB,QAjDG,WACjB+B,GAAeD,EAChB,EA+CO,UACE,SAACJ,EAAD,UAGJ,UAAC,IAAD,CAAQiB,UAAU,EAAOb,QAASA,EAASE,QAASA,EAApD,WACE,SAAC,IAAD,CAAKO,MAAO,CAAEK,aAAc,UAA5B,UACE,UAAC3B,EAAD,CAAOjB,QAASgC,EAAhB,WACE,SAAC,IAAD,CAAKa,KAAM,GAAX,UACE,SAACrB,EAAD,sBAEF,SAAC,IAAD,CAAKqB,KAAM,GAAX,UACE,SAACnB,EAAD,YAIN,SAACO,EAAD,WAKT,G,6HCxFYa,EAAerD,EAAAA,GAAAA,IAAH,sO,SCEZsD,EAAS,kBACpB,+BACE,SAACD,EAAD,CACE1C,IAAK4C,0CAHW,E,UCFTC,EAAgBxD,EAAAA,GAAAA,GAAH,6CCM1B,MAJA,YAA+C,IAA5ByD,EAA2B,EAA3BA,SACjB,OAAO,SAACD,EAAD,UAAgBC,GACxB,E,wCC2FD,EAxFkB,WAAO,IAAD,EACtB,GAAgDrB,EAAAA,EAAAA,UAAmB,IAAnE,eAAOsB,EAAP,KAAyBC,EAAzB,KACA,GAA8CvB,EAAAA,EAAAA,UAAS,GAAvD,eAAOwB,EAAP,KAAwBC,EAAxB,KACA,GAA4BzB,EAAAA,EAAAA,UAAS,IAArC,eAAO0B,EAAP,KAAeC,EAAf,KACMC,EAAgB,CACpB,CACEP,SAAU,4CACVQ,KAAMC,EAAAA,aAAAA,SACNC,QAAS,CAAC,MAAO,OAAQ,OAAQ,oBAEnC,CACEV,SAAU,8CACVQ,KAAMC,EAAAA,aAAAA,SACNC,QAAS,CAAC,MAAO,OAEnB,CACEV,SAAU,6DACVQ,KAAMC,EAAAA,aAAAA,YAGV,OACE,iCACE,SAACE,EAAA,EAAD,KACA,UAAC,EAAAC,QAAD,YACE,SAACf,EAAD,KACA,SAAC,EAAD,CAASG,SAAUO,EAAcJ,GAAiBH,WACjDO,EAAcJ,GAAiBK,OAASC,EAAAA,aAAAA,WACvC,SAAC,EAAAI,cAAD,oBACGN,EAAcJ,GAAiBO,eADlC,aACG,EAAwCI,KAAI,SAACC,GAAD,OAC3C,SAACnE,EAAA,EAAD,CAEEF,YAAY,EACZC,QAAS,IACTG,QAAS,WACHqD,GAAmBI,EAAcS,QAEnCC,QAAQC,IAAI,cAAejB,GAE7BG,EAAmBD,EAAkB,GACrCD,GAAoB,SAACD,GAAD,wBACfA,GADe,CAElBc,GAFkB,GAIrB,EAdH,SAgBGA,GAjBwC,MAsBhDR,EAAcJ,GAAiBK,OAASC,EAAAA,aAAAA,YACvC,+BACE,UAAC,EAAAI,cAAD,YACE,SAACM,EAAA,EAAD,CACE5D,KAAM,GACNC,YAAa,QACbC,SAAU,SAAC2D,GACTd,EAAUc,EAAEC,OAAOC,MACpB,EACD5E,WAAY,MACZiB,aAAa,KAEf,SAACf,EAAA,EAAD,CAEEF,YAAY,EACZC,QAAS,IACTG,QAAS,WACHqD,GAAmBI,EAAcS,QAEnCC,QAAQC,IAAI,cAAejB,GAE7BG,EAAmBD,EAAkB,GACrCD,GAAoB,SAACD,GAAD,wBACfA,GADe,CAElBI,GAFkB,GAIrB,EAdH,SAgBG,uBAQhB,C,kIC7FYQ,EAAgBtE,EAAAA,GAAAA,IAAH,4LAUbqE,EAAUrE,EAAAA,GAAAA,IAAH,kI,uBCZb,IAAKkE,E,kDAAZ,SAAYA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,UAAAA,WAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,G","sources":["common/Button/styles.ts","common/Button/index.tsx","common/Container/styles.ts","common/Container/index.tsx","common/SvgIcon/index.tsx","common/TextArea/index.tsx","common/TextArea/styles.tsx","components/Header/styles.ts","components/Header/index.tsx","common/Avatar/styles.ts","common/Avatar/index.tsx","common/Heading/styles.ts","common/Heading/index.tsx","pages/Questions/index.tsx","pages/Questions/styles.ts","pages/Questions/types.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledButton = styled('button')<any>`\n  background: ${(p) => p.color || '#fff'};\n  color: ${(p) => (p.color ? '#2E186A' : '#18216d')};\n  font-size: 1rem;\n  font-weight: 700;\n  width: ${(p) => (p.fixedWidth ? '100%' : '50%')};\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n  border: 1px solid #edf3f5;\n  border-color: ${(p) => (p.color ? '#2E186A' : '#318162')};\n  border-radius: 10px;\n  // box-shadow: 10px 10px 100px #318162;\n  // filter: drop-shadow(10px 10px 100px #318162);\n  padding: ${(p) => (p.padding ? p.padding : '13px 0')};\n  cursor: pointer;\n  margin-top: 0.625rem;\n  margin-right: -0.48rem;\n  max-width: ${(p) => (p.fixedWidth ? '180px' : 'none')};\n  transition: all 0.3s ease-in-out;\n  // box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    // color: #fff;\n    // border: 1px solid rgb(255, 130, 92);\n    // background-color: rgb(255, 130, 92);\n    border: 2px solid #edf3f5;\n    border-color: #026c43;\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({\n  color,\n  fixedWidth,\n  children,\n  onClick,\n}: ButtonProps) => (\n  <StyledButton color={color} fixedWidth={fixedWidth} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")<any>`\n  position: relative;\n  width: 100%;\n  max-width: 1200px;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 0 60px;\n  border-top: ${(p) => (p.border ? \"1px solid #CDD1D4\" : \"\")};\n\n  @media only screen and (max-width: 1024px) {\n    max-width: calc(100% - 68px);\n    padding: 0 30px;\n  }\n\n  @media only screen and (max-width: 768px) {\n    max-width: calc(100% - 38px);\n    padding: 0 18px;\n  }\n\n  @media only screen and (max-width: 414px) {\n    max-width: 100%;\n    padding: 0 18px;\n  }\n`;\n","import { StyledContainer } from \"./styles\";\nimport { ContainerProps } from \"../types\";\n\nconst Container = ({ border, children }: ContainerProps) => (\n  <StyledContainer border={border}>{children}</StyledContainer>\n);\n\nexport default Container;\n","import { SvgIconProps } from \"../types\";\n\nexport const SvgIcon = ({ src, width, height }: SvgIconProps) => (\n  <img src={`/img/svg/${src}`} alt={src} width={width} height={height} />\n);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({\n  name,\n  placeholder,\n  onChange,\n  t,\n  fixedWidth,\n  fixedHeight,\n}: InputProps) => (\n  <StyledContainer fixedWidth={fixedWidth}>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n      fixedHeight={fixedHeight}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")<any>`\n  display: inline-block;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n  width: ${(p) => (p.fixedWidth ? p.fixedWidth : \"100%\")};\n`;\n\nexport const StyledTextArea = styled(\"textarea\")<any>`\n  resize: none;\n  font-size: 0.875rem;\n  height: ${(p) => (p.fixedHeight ? \"183px\" : p.fixedHeight)};\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { MenuOutlined } from '@ant-design/icons';\n\nexport const HeaderSection = styled('header')`\n  padding: 1rem 0.5rem;\n\n  .ant-row-space-between {\n    align-items: center;\n    text-align: center;\n  }\n`;\n\nexport const LogoContainer = styled(Link)`\n  display: flex;\n`;\n\nexport const NavLink = styled('div')`\n  display: inline-block;\n  text-align: center;\n`;\n\nexport const CustomNavLink = styled('div')`\n  width: 203px;\n  display: inline-block;\n\n  @media only screen and (max-width: 411px) {\n    width: 150px;\n  }\n\n  @media only screen and (max-width: 320px) {\n    width: 118px;\n  }\n`;\n\nexport const ContactWrapper = styled('div')<any>`\n  cursor: pointer;\n  width: ${(p) => (p.width ? '100%' : '110px')};\n  font-weight: 700;\n  text-align: center;\n  border-radius: 1.25rem;\n  display: inline-block;\n`;\n\nexport const Burger = styled('div')`\n  @media only screen and (max-width: 890px) {\n    display: block;\n  }\n\n  display: none;\n\n  svg {\n    fill: #2e186a;\n  }\n`;\n\nexport const NotHidden = styled('div')`\n  @media only screen and (max-width: 890px) {\n    display: none;\n  }\n`;\n\nexport const Menu = styled('h5')`\n  font-size: 1.5rem;\n  font-weight: 600;\n  text-align: center;\n`;\n\nexport const CustomNavLinkSmall = styled(NavLink)`\n  font-size: 1.2rem;\n  color: #18216d;\n  transition: color 0.2s ease-in;\n  margin: 0.5rem 2rem;\n\n  @media only screen and (max-width: 768px) {\n    margin: 1.25rem 2rem;\n  }\n`;\n\nexport const Label = styled('span')`\n  font-weight: 500;\n  color: #404041;\n  text-align: right;\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nexport const Outline = styled(MenuOutlined)<any>`\n  font-size: 22px;\n`;\n\nexport const Span = styled('span')`\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: rgb(173, 226, 138);\n    text-underline-position: under;\n    text-decoration: rgb(173, 226, 138) wavy underline;\n  }\n`;\n","import { useState } from \"react\";\nimport { Row, Col, Drawer } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport Container from \"../../common/Container\";\nimport { SvgIcon } from \"../../common/SvgIcon\";\nimport { Button } from \"../../common/Button\";\nimport {\n  HeaderSection,\n  LogoContainer,\n  Burger,\n  NotHidden,\n  Menu,\n  CustomNavLinkSmall,\n  Label,\n  Outline,\n  Span,\n} from \"./styles\";\n\nconst Header = ({ t }: any) => {\n  const [visible, setVisibility] = useState(false);\n\n  const showDrawer = () => {\n    setVisibility(!visible);\n  };\n\n  const onClose = () => {\n    setVisibility(!visible);\n  };\n\n  const MenuItem = () => {\n    const scrollTo = (id: string) => {\n      const element = document.getElementById(id) as HTMLDivElement;\n      element.scrollIntoView({\n        behavior: \"smooth\",\n      });\n      setVisibility(false);\n    };\n    return (\n      <>\n        <CustomNavLinkSmall onClick={() => scrollTo(\"about\")}>\n          <Span>{t(\"About\")}</Span>\n        </CustomNavLinkSmall>\n        <CustomNavLinkSmall onClick={() => scrollTo(\"mission\")}>\n          <Span>{t(\"Mission\")}</Span>\n        </CustomNavLinkSmall>\n        <CustomNavLinkSmall onClick={() => scrollTo(\"product\")}>\n          <Span>{t(\"Product\")}</Span>\n        </CustomNavLinkSmall>\n        <CustomNavLinkSmall\n          style={{ width: \"180px\" }}\n          onClick={() => scrollTo(\"contact\")}\n        >\n          <Span>\n            <Button fixedWidth={true}>{t(\"Become a Partner\")}</Button>\n          </Span>\n        </CustomNavLinkSmall>\n      </>\n    );\n  };\n\n  return (\n    <HeaderSection>\n      <Container>\n        <Row justify=\"space-between\">\n          <LogoContainer to=\"/\" aria-label=\"homepage\">\n            <SvgIcon src=\"logo.svg\" width=\"101px\" height=\"64px\" />\n          </LogoContainer>\n          <NotHidden>\n            <MenuItem />\n          </NotHidden>\n          <Burger onClick={showDrawer}>\n            <Outline />\n          </Burger>\n        </Row>\n        <Drawer closable={false} visible={visible} onClose={onClose}>\n          <Col style={{ marginBottom: \"2.5rem\" }}>\n            <Label onClick={onClose}>\n              <Col span={12}>\n                <Menu>Menu</Menu>\n              </Col>\n              <Col span={12}>\n                <Outline />\n              </Col>\n            </Label>\n          </Col>\n          <MenuItem />\n        </Drawer>\n      </Container>\n    </HeaderSection>\n  );\n};\n\nexport default withTranslation()(Header);\n","import styled from 'styled-components';\n\nexport const StyledCircle = styled.img`\n  vertical-align: middle;\n  width: 72px;\n  height: 72px;\n  // background: rebeccapurple;\n  object-fit: cover;\n  display: block;\n  border-radius: 50%;\n  // background-image: url('./img/avatar.png');\n`;\n","import React from 'react';\nimport { SvgIcon } from '../SvgIcon';\nimport { StyledCircle } from './styles';\n\nexport const Avatar = () => (\n  <>\n    <StyledCircle\n      src={process.env.PUBLIC_URL + '/img/avatar.png'}\n    ></StyledCircle>\n  </>\n);\n","import styled from \"styled-components\";\n\nexport const HeaderWrapper = styled.h2`\n  margin-top: 24px;\n`;\n","import React from \"react\";\nimport { questionProps } from \"../types\";\nimport { HeaderWrapper } from \"./styles\";\n\nfunction Heading({ question }: questionProps) {\n  return <HeaderWrapper>{question}</HeaderWrapper>;\n}\n\nexport default Heading;\n","import { useState } from 'react';\nimport { Avatar } from '../../common/Avatar';\nimport { Button } from '../../common/Button';\nimport Heading from '../../common/Heading';\nimport TextArea from '../../common/TextArea';\nimport Header from '../../components/Header';\nimport { ButtonWrapper, Wrapper } from './styles';\nimport { QuestionType } from './types';\n\nconst Questions = () => {\n  const [answerByCustomer, setAnswerByCustomer] = useState<string[]>([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [amount, setAmount] = useState('');\n  const questionaaire = [\n    {\n      question: 'How much waste do you produce in a month?',\n      type: QuestionType.QUESTION,\n      answers: ['5kg', '>5kg', '10kg', 'shameful amount'],\n    },\n    {\n      question: 'Do you want us to help you feel less guilty',\n      type: QuestionType.QUESTION,\n      answers: ['yes', 'no'],\n    },\n    {\n      question: 'How much money do you think your guilt will make you earn?',\n      type: QuestionType.INPUTTYPE,\n    },\n  ];\n  return (\n    <>\n      <Header />\n      <Wrapper>\n        <Avatar />\n        <Heading question={questionaaire[currentQuestion].question}></Heading>\n        {questionaaire[currentQuestion].type === QuestionType.QUESTION && (\n          <ButtonWrapper>\n            {questionaaire[currentQuestion].answers?.map((answer) => (\n              <Button\n                // color={'#318162'}\n                fixedWidth={false}\n                padding={'0'}\n                onClick={() => {\n                  if (currentQuestion >= questionaaire.length) {\n                    //send to api\n                    console.log('answers are', answerByCustomer);\n                  }\n                  setCurrentQuestion(currentQuestion + 1);\n                  setAnswerByCustomer((answerByCustomer) => [\n                    ...answerByCustomer,\n                    answer,\n                  ]);\n                }}\n              >\n                {answer}\n              </Button>\n            ))}\n          </ButtonWrapper>\n        )}\n        {questionaaire[currentQuestion].type === QuestionType.INPUTTYPE && (\n          <>\n            <ButtonWrapper>\n              <TextArea\n                name={''}\n                placeholder={'Rupee'}\n                onChange={(e) => {\n                  setAmount(e.target.value);\n                }}\n                fixedWidth={'50%'}\n                fixedHeight={false}\n              ></TextArea>\n              <Button\n                // color={'#318162'}\n                fixedWidth={false}\n                padding={'0'}\n                onClick={() => {\n                  if (currentQuestion >= questionaaire.length) {\n                    //send to api\n                    console.log('answers are', answerByCustomer);\n                  }\n                  setCurrentQuestion(currentQuestion + 1);\n                  setAnswerByCustomer((answerByCustomer) => [\n                    ...answerByCustomer,\n                    amount,\n                  ]);\n                }}\n              >\n                {'continue'}\n              </Button>\n            </ButtonWrapper>\n          </>\n        )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Questions;\n","import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: center;\n  }\n  justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 30%;\n  margin-right: 30%;\n  margin-top: 5%;\n`;\n","export enum QuestionType {\n  QUESTION = \"question\",\n  INPUTTYPE = \"inputType\",\n}\n"],"names":["StyledButton","styled","p","color","fixedWidth","padding","Button","children","onClick","StyledContainer","border","SvgIcon","src","width","height","alt","withTranslation","name","placeholder","onChange","t","fixedHeight","htmlFor","id","StyledTextArea","Label","HeaderSection","LogoContainer","Link","NavLink","Burger","NotHidden","Menu","CustomNavLinkSmall","Outline","MenuOutlined","Span","useState","visible","setVisibility","onClose","MenuItem","scrollTo","document","getElementById","scrollIntoView","behavior","style","Container","justify","to","closable","marginBottom","span","StyledCircle","Avatar","process","HeaderWrapper","question","answerByCustomer","setAnswerByCustomer","currentQuestion","setCurrentQuestion","amount","setAmount","questionaaire","type","QuestionType","answers","Header","Wrapper","ButtonWrapper","map","answer","length","console","log","TextArea","e","target","value"],"sourceRoot":""}