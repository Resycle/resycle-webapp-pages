{"version":3,"file":"static/js/119.48253631.chunk.js","mappings":"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","sources":["common/TextArea/index.tsx","common/TextArea/styles.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/Input/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({\n  name,\n  placeholder,\n  onChange,\n  t,\n  fixedWidth,\n  fixedHeight,\n}: InputProps) => (\n  <StyledContainer fixedWidth={fixedWidth}>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n      fixedHeight={fixedHeight}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")<any>`\n  display: inline-block;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n  width: ${(p) => (p.fixedWidth ? p.fixedWidth : \"100%\")};\n`;\n\nexport const StyledTextArea = styled(\"textarea\")<any>`\n  resize: none;\n  font-size: 0.875rem;\n  height: ${(p) => (p.fixedHeight ? \"183px\" : p.fixedHeight)};\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = \"\";\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")<any>`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport { withTranslation } from 'react-i18next';\nimport { Slide, Zoom } from 'react-awesome-reveal';\nimport { ContactProps, ValidationTypeProps } from './types';\nimport { useForm } from '../../common/utils/useForm';\nimport validate from '../../common/utils/validationRules';\nimport { Button } from '../../common/Button';\nimport Block from '../Block';\nimport Input from '../../common/Input';\nimport TextArea from '../../common/TextArea';\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from './styles';\n// import ReCAPTCHA from 'react-google-recaptcha';\n\nconst captchaSiteKey: string = process.env\n  .REACT_APP_GOOGLE_CAPTCHA_SITE_KEY as string;\n\nconsole.log(captchaSiteKey);\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction='left'>\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify='space-between' align='middle'>\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction='left'>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction='right'>\n            <FormGroup autoComplete='off' onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type='text'\n                  name='name'\n                  placeholder='Your Name'\n                  value={values.name || ''}\n                  onChange={handleChange}\n                />\n                <ValidationType type='name' />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type='text'\n                  name='email'\n                  placeholder='Your Email'\n                  value={values.email || ''}\n                  onChange={handleChange}\n                />\n                <ValidationType type='email' />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder='Your Message'\n                  value={values.message || ''}\n                  name='message'\n                  onChange={handleChange}\n                />\n                <ValidationType type='message' />\n              </Col>\n              <Row\n                justify='space-between'\n                align='middle'\n                style={{ paddingTop: '15px' }}\n              >\n                <ButtonContainer style={{ paddingLeft: '5px' }}>\n                  {/* <ReCAPTCHA sitekey={captchaSiteKey} /> */}\n                </ButtonContainer>\n                <ButtonContainer style={{ width: '40%' }}>\n                  <Button name='submit'>{t('Submit')}</Button>\n                </ButtonContainer>\n              </Row>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["withTranslation","name","placeholder","onChange","t","fixedWidth","fixedHeight","htmlFor","id","StyledContainer","styled","p","StyledTextArea","Label","useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","value","handleSubmit","preventDefault","axios","then","email","test","Content","Container","TextWrapper","title","content","StyledInput","ContactContainer","FormGroup","Span","ButtonContainer","captchaSiteKey","process","REACT_APP_GOOGLE_CAPTCHA_SITE_KEY","console","log","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","TextArea","style","paddingTop","paddingLeft","width","Button"],"sourceRoot":""}